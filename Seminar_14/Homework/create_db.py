"""
üìå–í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ 8 –ø—Ä–æ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö,
–≥–¥–µ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∏–º—è, –ª–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7)
—Å–æ—Ö—Ä–∞–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª.
üìå–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå–û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç
 –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""
import json
import os


class User:
    def __init__(self, name, the_id, level):
        if not isinstance(name, str) or not name.isalpha():
            raise ValueError('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∞')
        self.name = name
        if not isinstance(the_id, int) or the_id <= 0:
            raise ValueError('–õ–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        self._id = the_id
        if not isinstance(the_id, int) or level not in range(1, 8):
            raise ValueError('–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 7')
        self.level = level

    def __str__(self):
        return f'{self.name = }, {self._id = }, {self.level}'

    def __eq__(self, other):
        if isinstance(other, User):
            return all((self.name == other.name, self._id == other._id))


def load_json(path):
    if os.path.exists(path):
        with open(path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    else:
        data = {}
    return data

def worker(id, name, level):
    try:
        new_user = User(name, int(id), int(level))
        return new_user
    except ValueError as e:
        print(e)

def save_json(path, user_db):
    with open(path, 'w', encoding='UTF-8') as file:
        json.dump(user_db, file, indent=4, ensure_ascii=False)

def add_user(user_db, new_user):
    if str(new_user._id) not in user_db.keys():
        user_db[new_user._id] = {'name': new_user.name, 'level': new_user.level}
    return user_db


if __name__ == '__main__':
    path = 'my_user.json'
    user_db = load_json(path)
    new_user = worker(0.5, '–ê–Ω—Ç–æ–Ω', 2)
    user_db = add_user(user_db, new_user)
    save_json(path, user_db)


