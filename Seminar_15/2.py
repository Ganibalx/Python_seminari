"""
üìå–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.
–û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
üìå–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å logging.
"""
import logging


def dec(func):
    format = '{msg}'
    logging.basicConfig(filename='my.log.', style='{', filemode='a', encoding='utf-8', level=logging.NOTSET,
                        format=format)
    logger = logging.getLogger(__name__)

    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        str_args, str_kwargs = '', ''
        if args:
            str_args = 'args: ' + ', '.join(args)
        if kwargs:
            str_kwargs = 'kwargs: ' + ', '.join([f'{key}={value}' for key, value in kwargs.items()])
        logger.info(msg=f'{result = }, {str_args}' + f'{", " if args and args else " "}' + f'{str_kwargs}')
        return result
    return wrapper

@dec
def func(a, b):
    return a + '_' + b

print(func('–ü–µ—Ä–≤–∞—è', '–í—Ç–æ—Ä–∞—è'))
print(func(a='–ü–æ–ø—ã—Ç–∫–∞', b='–î–≤–∞'))
print(func('–¢—Ä–µ—Ç—å—è', b='–ø—Ñ—ã—Ç–∫–∞'))